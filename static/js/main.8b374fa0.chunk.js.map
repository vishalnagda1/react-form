{"version":3,"sources":["logo.svg","Form/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FormComponent","submit","event","preventDefault","setState","display","onRadioClick","value","gender","onCheckSelect","state","courses","includes","index","indexOf","splice","push","nameChange","target","name","ageChange","age","this","className","Form","onSubmit","Group","as","Row","controlId","Label","column","sm","Col","Control","type","placeholder","onChange","required","Check","label","checked","Button","variant","data","React","Component","Display","props","Table","striped","bordered","hover","join","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8b374fa0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport {Form, Row, Col, Button, Table} from 'react-bootstrap';\n\nexport default class FormComponent extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            name: \"\",\n            age: \"\",\n            gender: \"Male\",\n            courses: [\"React\"],\n            display: false\n        }\n    }\n\n    submit = event => {\n        event.preventDefault();\n        this.setState({display: true});\n    }\n\n    onRadioClick = value => () => {\n        this.setState({gender: value, display: false});\n    }\n\n    onCheckSelect = value => () => {\n        this.setState((state) => {\n            const courses = [...state.courses];\n            if(courses.includes(value)) {\n                const index = courses.indexOf(value);\n                courses.splice(index, 1);\n            } else {\n                courses.push(value);\n            }\n            return {courses, display: false};\n        });\n    }\n\n    nameChange = event => {\n        const {value} = event.target\n        this.setState({name: value, display: false});\n    }\n\n    ageChange = event => {\n        const {value} = event.target\n        this.setState({age: value, display: false});\n    }\n\n    render() {\n        const {name, age, gender, courses} = this.state;\n        // const display = \"\";\n        return(\n            <div>\n                <div className=\"form-Div\">\n                    <Form onSubmit={this.submit}>\n                        <Form.Group as={Row} controlId=\"formInputName\">\n                            <Form.Label column sm=\"4\">\n                            Name\n                            </Form.Label>\n                            <Col sm=\"8\">\n                            <Form.Control type=\"text\" value={name} placeholder=\"Vishal\" onChange={this.nameChange} required />\n                            </Col>\n                        </Form.Group>\n                        <Form.Group as={Row} controlId=\"formInputName\">\n                            <Form.Label column sm=\"4\">\n                            Age\n                            </Form.Label>\n                            <Col sm=\"8\">\n                            <Form.Control type=\"number\" value={age} placeholder=\"26\" onChange={this.ageChange} required />\n                            </Col>\n                        </Form.Group>\n                        <Form.Group as={Row} controlId=\"formInputName\">\n                            <Form.Label column sm=\"4\">\n                            Gender\n                            </Form.Label>\n                            <Col sm=\"4\">\n                                <Form.Check type=\"radio\" onChange={this.onRadioClick(\"Male\")} label=\"Male\" name=\"gender\" checked={gender===\"Male\"} />\n                            </Col>\n                            <Col sm=\"4\">\n                                <Form.Check type=\"radio\" onChange={this.onRadioClick(\"Female\")} label=\"Female\" name=\"gender\" checked={gender===\"Female\"} />\n                            </Col>\n                        </Form.Group>\n                        <Form.Group as={Row} controlId=\"formInputName\">\n                            <Form.Label column sm=\"4\">\n                            Courses\n                            </Form.Label>\n                            <Col sm=\"4\">\n                                <Form.Check onChange={this.onCheckSelect(\"React\")} type=\"checkbox\" label=\"React\" name=\"courses\" checked={courses.includes(\"React\")} />\n                            </Col>\n                            <Col sm=\"4\">\n                                <Form.Check onChange={this.onCheckSelect(\"Angular\")} type=\"checkbox\" label=\"Anguar\" name=\"courses\" checked={courses.includes(\"Angular\")} />\n                            </Col>\n                        </Form.Group>\n                        <Button variant=\"primary\" type=\"submit\">\n                            Submit\n                        </Button>\n                    </Form>\n                </div>\n                <br />\n                <br />\n                <br />\n                <div className=\"table-div\">\n                    {this.state.display && <Display data={this.state} />}\n                </div>\n            </div>\n        );\n    };\n};\n\nclass Display extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        const {name, age, gender, courses} = this.props.data;\n        return(\n            <Table striped bordered hover variant=\"dark\">\n                <tbody>\n                    <tr>\n                        <td>Name</td>\n                        <td>{name}</td>\n                    </tr>\n                    <tr>\n                        <td>Age</td>\n                        <td>{age}</td>\n                    </tr>\n                    <tr>\n                        <td>Gender</td>\n                        <td>{gender}</td>\n                    </tr>\n                    <tr>\n                        <td>Courses</td>\n                        <td>{courses.join(\", \")}</td>\n                    </tr>\n                </tbody>\n            </Table>\n        );\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport FormComponent from './Form';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <FormComponent />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}